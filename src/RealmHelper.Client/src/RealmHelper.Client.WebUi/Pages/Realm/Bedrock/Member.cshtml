@page "/realm/bedrock/{realmId:long}/member/{memberId}"

@using Humanizer

@using RealmHelper.Realm.Bedrock.Abstractions.Types

@model Member

@{
    ViewData["Title"] = Model.Profile.Gamertag;
}

@section Styles
{
    <link rel="stylesheet" href="~/css/realm/member.css" asp-append-version="true" />
}

<div class="realm-member">
    <div class="box">
        @if (Model.OwnedRealm && !Model.Owner)
        {
            @if (Model.Blocked)
            {
                <img data-tippy-content="Unblock" class="img-button main-action" src="~/img/actions/unblock.png" alt=""/>
            }
            else if (Model.Invited)
            {
                <img data-tippy-content="Delete invite" class="img-button main-action" src="~/img/actions/delete.png" alt=""/>
            }
            else if (Model.Player is not null)
            {
                <img data-tippy-content="Block" class="img-button main-action" src="~/img/actions/block.png" alt=""/>
            }
            else
            {
                <img data-tippy-content="Invite" class="img-button main-action" src="~/img/actions/invite.png" alt=""/>
            }
        }

        <img class="member-icon" src="@Model.Profile.DisplayImageUrl" alt=""/>

        <ul class="member-info">
            <li>
                <span class="info-name">Gamertag</span>

                <span class="info-value">@Model.Profile.Gamertag</span>
            </li>
            
            <li>
                <span class="info-name">Status</span>
                
                @if (Model.Blocked)
                {
                    <span class="info-value">Blocked</span>
                }
                else if (Model.Invited)
                {
                    <span class="info-value">Invited</span>
                }
                else if (Model.Player is null && Model.OwnedRealm)
                {
                    <span class="info-value">Not in the club</span>
                }
                else if (Model.ClubMember is null)
                {
                    <span class="info-value">
                        @(Model.OwnedRealm
                            ? $"Last seen over {Model.Club.Members[^1].LastSeenTimestamp.Humanize()}"
                            : "Unknown"
                        )
                    </span>
                }
                else
                {
                    <span class="info-value">Last seen @Model.ClubMember.LastSeenTimestamp.Humanize()</span>
                }
            </li>

            @if (!Model.Owner && Model.Player is not null)
            {
                <li>
                    <span class="info-name">Permission</span>

                    <select class="info-value" name="permission">
                        <option value="@Permission.Visitor" @(Model.Player.Permission == Permission.Visitor ? "selected" : "")></option>
                        <option value="@Permission.Member" @(Model.Player.Permission == Permission.Member ? "selected" : "")></option>
                        <option value="@Permission.Operator" @(Model.Player.Permission == Permission.Operator ? "selected" : "")></option>
                    </select>
                </li>
            }
        </ul>
    </div>
</div>

@if (Model.OwnedRealm && !Model.Owner)
{
    @section Scripts
    {
        <script>
            tippy(".main-action", { arrow: false });
        
            document.querySelector(".main-action").addEventListener("click", async function() {
                @if (Model.Blocked)
                {
                    @:const url = "@Url.Action("BlockPlayer", "BedrockRealm", new { realmId = Model.Realm.Id, player = Model.Profile.Xuid })";
                    @:const processToast = "Unblocking the user...";
                    @:const successToast = "The user has been unblocked";
                    @:const method = "post";
                }
                else if (Model.Invited)
                {
                    @:const url = "@Url.Action("Uninvite", "BedrockRealm", new { realmId = Model.Realm.Id, player = Model.Profile.Xuid })";
                    @:const processToast = "Deleting the invite...";
                    @:const successToast = "The invite has been deleted";
                    @:const method = "delete";
                }
                else if (Model.Player is not null)
                {
                    @:const url = "@Url.Action("UnblockPlayer", "BedrockRealm", new { realmId = Model.Realm.Id, player = Model.Profile.Xuid })";
                    @:const processToast = "Blocking the user...";
                    @:const successToast = "The user has been blocked";
                    @:const method = "delete";
                }
                else
                {
                    @:const url = "@Url.Action("Invite", "BedrockRealm", new { realmId = Model.Realm.Id, player = Model.Profile.Xuid })";
                    @:const processToast = "Inviting the user...";
                    @:const successToast = "The user has been invited";
                    @:const method = "post";
                }
                
                await makeRequest(url, processToast, successToast, method, undefined, true, this);
            });
        
            new TomSelect(document.querySelector("select[name=permission]"), {
                onInitialize: function () {
                    this.control_input.disabled = true;
                },
                render: {
                    item: (data) => `<img class="img-button" alt=\"\" src=\"/img/permissions/${data.value.toLowerCase()}.png\" />`,
                    option: (data) => `<img class="img-button" alt=\"\" src=\"/img/permissions/${data.value.toLowerCase()}.png\" />`
                },
                onChange: async function (permission) {
                    await makeRequest(
                        "@Url.Action("ChangePlayerPermission", "BedrockRealm", new { realmId = Model.Realm.Id, player = Model.Profile.Xuid })",
                        "Saving the permission...",
                        "The permission has been saved",
                        "put",
                        permission
                    );
                }
            });
        </script>
    }
}